import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN5')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

class AppraisalForm(StatesGroup):
    object_type = State()
    purpose = State()
    region = State()
    area = State()
    comment = State()
    contact = State()

object_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="1. –ö–≤–∞—Ä—Ç–∏—Ä–∞"), KeyboardButton(text="2. –î–æ–º")],
    [KeyboardButton(text="3. –ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫"), KeyboardButton(text="4. –ö–æ–º–º–µ—Ä—Ü–∏—è")],
    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
])

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                                       "–ù—É–∂–Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏? üè¢ –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç—á–µ—Ç –∑–∞ 1 –¥–µ–Ω—å!* ‚úÖ –î–ª—è –±–∞–Ω–∫–æ–≤, —Å—É–¥–æ–≤, —Å–¥–µ–ª–æ–∫ ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, "
                                       "—á—Ç–æ–±—ã –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç. –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ü–µ–Ω–∏—Ç—å?", reply_markup=object_kb)
    await state.set_state(AppraisalForm.object_type)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    current = await state.get_state()
    steps = list(AppraisalForm.__all_states__)
    if current == steps[0]:
        await message.answer("–í—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —à–∞–≥–µ. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:")
    else:
        idx = steps.index(current) - 1
        await state.set_state(steps[idx])
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞:")

@dp.message(AppraisalForm.object_type)
async def handle_object(message: types.Message, state: FSMContext):
    await state.update_data(object_type=message.text)
    await state.set_state(AppraisalForm.purpose)
    await message.answer("üéØ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –æ—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –¥–ª—è —Å—É–¥–∞, –¥–ª—è –∏–ø–æ—Ç–µ–∫–∏):")

@dp.message(AppraisalForm.purpose)
async def handle_purpose(message: types.Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    await state.set_state(AppraisalForm.region)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:")

@dp.message(AppraisalForm.region)
async def handle_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text)
    await state.set_state(AppraisalForm.area)
    await message.answer("üìê –£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –≤ –º¬≤:")

@dp.message(AppraisalForm.area)
async def handle_area(message: types.Message, state: FSMContext):
    await state.update_data(area=message.text)
    await state.set_state(AppraisalForm.comment)
    await message.answer("üìù –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")

@dp.message(AppraisalForm.comment)
async def handle_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(AppraisalForm.contact)
    await message.answer("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message(AppraisalForm.contact)
async def handle_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    result = (
        f"<b>üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É:</b>\n"
        f"üè† –û–±—ä–µ–∫—Ç: {data.get('object_type')}\n"
        f"üéØ –¶–µ–ª—å: {data.get('purpose')}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {data.get('region')}\n"
        f"üìê –ü–ª–æ—â–∞–¥—å: {data.get('area')}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}"
    )

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=result)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
