import logging
import asyncio
import sys
import os
from dotenv import load_dotenv

try:
    import ssl
except ModuleNotFoundError:
    ssl = None
    logging.error("–ú–æ–¥—É–ª—å SSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ OpenSSL –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.")

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN1')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_TOKEN:
    raise ValueError("API_TOKEN1 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
if ssl is None:
    sys.exit("–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å SSL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
class SaleForm(StatesGroup):
    property_type = State()
    location = State()
    details = State()
    price = State()
    contact = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
property_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="–ö–≤–∞—Ä—Ç–∏—Ä–∞"), KeyboardButton(text="–î–æ–º")],
    [KeyboardButton(text="–î–∞—á–∞"), KeyboardButton(text="–£—á–∞—Å—Ç–æ–∫")],
    [KeyboardButton(text="–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")],
    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
])

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                        "–≠—Ç–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, "
                        "—á—Ç–æ–±—ã –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç. –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∫—É–ø–∏—Ç—å?", reply_markup=property_kb)
    await state.set_state(SaleForm.property_type)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    state_list = list(SaleForm.__all_states__)
    if current_state == state_list[0]:
        await message.answer("–í—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.", reply_markup=property_kb)
    else:
        prev_index = state_list.index(current_state) - 1
        await state.set_state(state_list[prev_index])
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞:")

@dp.message(SaleForm.property_type)
async def process_type(message: types.Message, state: FSMContext):
    await state.update_data(property_type=message.text)
    await state.set_state(SaleForm.location)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —Ä–∞–π–æ–Ω, –∫–∞–∫–∏–µ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())

@dp.message(SaleForm.location)
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(SaleForm.details)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–µ—Ç—Ä–∞–∂, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –ø—Ä–æ—á–∏–µ –¥–µ—Ç–∞–ª–∏:")

@dp.message(SaleForm.details)
async def process_details(message: types.Message, state: FSMContext):
    await state.update_data(details=message.text)
    await state.set_state(SaleForm.price)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É:")

@dp.message(SaleForm.price)
async def process_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(SaleForm.contact)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è:")

@dp.message(SaleForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    summary = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:</b>\n"
        f"–¢–∏–ø: {data['property_type']}\n"
        f"–ê–¥—Ä–µ—Å: {data['location']}\n"
        f"–î–µ—Ç–∞–ª–∏: {data['details']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )
    await bot.send_message(ADMIN_CHAT_ID, summary)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
