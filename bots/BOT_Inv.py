import logging
import asyncio
import sys
import os
from dotenv import load_dotenv

try:
    import ssl
except ModuleNotFoundError:
    ssl = None
    logging.error("–ú–æ–¥—É–ª—å SSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ OpenSSL –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.")

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN3')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_TOKEN:
    raise ValueError("API_TOKEN3 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

logging.basicConfig(level=logging.INFO)

if ssl is None:
    sys.exit("–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å SSL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL.")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

class InvestForm(StatesGroup):
    direction = State()
    amount = State()
    term = State()
    comment = State()
    contact = State()

invest_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ—Ö–æ–¥ –¥–æ 3 –º–ª–Ω —Ä—É–± –∏ –≤—ã—à–µ)")],
    [KeyboardButton(text="–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")],
    [KeyboardButton(text="–í—ã–∫—É–ø –ª–æ—Ç–æ–≤ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞")],
    [KeyboardButton(text="–í–∫–ª–∞–¥—ã –ø–æ–¥ 29% –≥–æ–¥–æ–≤—ã—Ö")],
    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
])

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
        "–í—ã–≥–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –∑–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –≤–∫–ª–∞–¥—ã –ø–æ–¥ 29% –≥–æ–¥–æ–≤—ã—Ö, –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, "
        "—á—Ç–æ–±—ã –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–º–æ—á—å –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
    )
    await message.answer(
        "üîπ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        "‚Äî –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Äî –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã\n"
        "‚Äî –ú—ã –ø–æ–¥–±–µ—Ä–µ–º –≤—ã–≥–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é"
    )
    await state.set_state(InvestForm.direction)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:", reply_markup=invest_kb)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    state_list = list(InvestForm.__all_states__)
    if current_state == state_list[0]:
        await message.answer("–í—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:", reply_markup=invest_kb)
    else:
        prev_index = state_list.index(current_state) - 1
        await state.set_state(state_list[prev_index])
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞:")

@dp.message(InvestForm.direction)
async def process_direction(message: types.Message, state: FSMContext):
    valid_options = [
        "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ—Ö–æ–¥ –¥–æ 3 –º–ª–Ω —Ä—É–± –∏ –≤—ã—à–µ)",
        "–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "–í—ã–∫—É–ø –ª–æ—Ç–æ–≤ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞",
        "–í–∫–ª–∞–¥—ã –ø–æ–¥ 29% –≥–æ–¥–æ–≤—ã—Ö"
    ]
    if message.text not in valid_options:
        await message.answer("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=invest_kb)
        return
    await state.update_data(direction=message.text)
    await state.set_state(InvestForm.amount)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:", reply_markup=ReplyKeyboardRemove())

@dp.message(InvestForm.amount)
async def process_amount(message: types.Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùó–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É.")
        return
    await state.update_data(amount=message.text)
    await state.set_state(InvestForm.term)
    await message.answer("üìÖ –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: 6 –º–µ—Å—è—Ü–µ–≤, 1 –≥–æ–¥, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ)")

@dp.message(InvestForm.term)
async def process_term(message: types.Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫.")
        return
    await state.update_data(term=message.text)
    await state.set_state(InvestForm.comment)
    await message.answer("üìù –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")

@dp.message(InvestForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(InvestForm.contact)
    await message.answer("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message(InvestForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ùó–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
        return
    await state.update_data(contact=message.text)
    data = await state.get_data()

    summary = (
        f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</b>\n"
        f"üî∏ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('direction')}\n"
        f"üî∏ –°—É–º–º–∞: {data.get('amount')}\n"
        f"üî∏ –°—Ä–æ–∫: {data.get('term')}\n"
        f"üî∏ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"üî∏ –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}"
    )

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if 'asyncio.run() cannot be called from a running event loop' in str(e):
            import nest_asyncio
            nest_asyncio.apply()
            asyncio.get_event_loop().run_until_complete(main())
        else:
            raise
