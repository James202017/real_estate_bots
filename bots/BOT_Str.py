import logging
import asyncio
import os
import sys
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN4')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

if not API_TOKEN or not ADMIN_CHAT_ID:
    sys.exit("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN4 –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")

ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class InsuranceForm(StatesGroup):
    direction = State()
    object_info = State()
    period = State()
    comment = State()
    contact = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
insurance_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="1. –û–°–ê–ì–û"), KeyboardButton(text="2. –ò–ø–æ—Ç–µ–∫–∞")],
    [KeyboardButton(text="3. –ò–º—É—â–µ—Å—Ç–≤–æ"), KeyboardButton(text="4. –ì—Ä—É–∑—ã")],
    [KeyboardButton(text="5. –ê–Ω—Ç–∏–∫–ª–µ—â"), KeyboardButton(text="6. –ù–µ—Å—á–∞—Å—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏")],
    [KeyboardButton(text="7. –ü–æ—Ç–µ—Ä—è —Ä–∞–±–æ—Ç—ã")],
    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
])

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ. "
        "–ó–∞—â–∏—Ç–∞ –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞: –û–°–ê–ì–û, –∏–ø–æ—Ç–µ—á–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –ø–æ—Ç–µ—Ä–∏ —Ä–∞–±–æ—Ç—ã."
    )
    await state.set_state(InsuranceForm.direction)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è:", reply_markup=insurance_kb)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    state_list = list(InsuranceForm.__all_states__)
    if current_state == state_list[0]:
        await message.answer("üîÑ –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    else:
        prev_index = state_list.index(current_state) - 1
        await state.set_state(state_list[prev_index])
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ:")

@dp.message(InsuranceForm.direction)
async def process_direction(message: types.Message, state: FSMContext):
    options = [
        "1. –û–°–ê–ì–û", "2. –ò–ø–æ—Ç–µ–∫–∞", "3. –ò–º—É—â–µ—Å—Ç–≤–æ",
        "4. –ì—Ä—É–∑—ã", "5. –ê–Ω—Ç–∏–∫–ª–µ—â", "6. –ù–µ—Å—á–∞—Å—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏", "7. –ü–æ—Ç–µ—Ä—è —Ä–∞–±–æ—Ç—ã"
    ]
    if message.text not in options:
        await message.answer("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(direction=message.text)
    await state.set_state(InsuranceForm.object_info)
    await message.answer("üìÑ –£—Ç–æ—á–Ω–∏—Ç–µ –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")

@dp.message(InsuranceForm.object_info)
async def process_object(message: types.Message, state: FSMContext):
    await state.update_data(object_info=message.text)
    await state.set_state(InsuranceForm.period)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –≥–æ–¥, 6 –º–µ—Å—è—Ü–µ–≤):")

@dp.message(InsuranceForm.period)
async def process_period(message: types.Message, state: FSMContext):
    await state.update_data(period=message.text)
    await state.set_state(InsuranceForm.comment)
    await message.answer("üìù –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")

@dp.message(InsuranceForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(InsuranceForm.contact)
    await message.answer("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message(InsuranceForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    summary = (
        f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:</b>\n"
        f"üîπ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('direction')}\n"
        f"üîπ –û–±—ä–µ–∫—Ç: {data.get('object_info')}\n"
        f"üîπ –°—Ä–æ–∫: {data.get('period')}\n"
        f"üîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"üîπ –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}"
    )

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "asyncio.run() cannot be called from a running event loop" in str(e):
            import nest_asyncio
            nest_asyncio.apply()
            asyncio.get_event_loop().run_until_complete(main())
        else:
            raise
